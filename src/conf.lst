
 Lahey/Fujitsu Fortran 95 Compiler Release L6.20b  Thu Dec 15 15:56:24 2005
 Copyright (C) 1994-2003 Lahey Computer Systems.  All rights reserved.
 Copyright (C) 1998-2003 FUJITSU LIMITED. All rights reserved.

 Compilation information
   Current directory : /home/job/src/vasputil
   Source file       : src/conf.f90
   Compiler options  : --ap -c --chk aesux --chkglobal --nco --dal --ndbl --f95 
                     : -g --nin --info --li --lst --nlong --maxfatals 50 --nml 
                     : --nmldefault --o0 --no --nocl --nopenmp --nparallel 
                     : --nprefetch --pca --nprivate --nquad --quiet --nsav 
                     : --nshared --nsse2 --nstaticlink --nswm --tp 
                     : --nthreadheap --nthreads --trace --trap --nunroll 
                     : --nvarheap --nversion --warn --nwide --nwisk --wo --nzfm 
                     : --xref

 Module "conf"
  (line-no.)(nest)
          1        !****h* vasputil/conf
          2        ! PURPOSE
          3        ! Global configuration data for the application
          4        !****
          5        module conf
          6        
          7          ! Working precision is IEEE double precision
          8          use kind_params, only: wp => dp
          9        
         10          implicit none
         11        
         12          ! Change this to compile with(out) debug prints.
         13          logical, parameter :: debug = .false.
         14        
         15          contains
         16        
         17        
         18            !****f* conf/error_stop
         19            ! PURPOSE
         20            !   Print an error message and stop the program.
         21            !****
         22            subroutine error_stop(message)
         23              character(len=*), intent(in), optional :: message
         24     1        if (present(message)) then
         25     1           print *, message
         26     1        end if
         27              print *, 'Error encountered, stopping.'
         28              stop 1
         29            end subroutine error_stop
         30        
         31        
         32            !****f* conf/error_msg
         33            ! PURPOSE
         34            !  Depending on the presence of the optional parameter,
         35            !  set the status flag or call error_stop
         36            !****
         37            subroutine error_msg (flagval, message, status)
         38              character(len=*), intent(in), optional :: message
         39              integer, intent(in) :: flagval
         40              integer, intent(out), optional :: status
         41        
         42     1        if (present (status)) then
         43     1           status = flagval
         44     1        else
         45     1           call error_stop (message)
         46     1        end if
         47            end subroutine error_msg
         48        
         49        
         50        end module conf

 Procedure information
   Lines      : 50
   Statements : 24

 Scoping unit of module : conf
   Attribute and Cross reference of name
     conf
      |(Class and Type) : module name
      |(Attributes)     : 
      |(Declaration)    : 5
      |(Definition)     : 
      |(Reference)      : 50
     debug
      |(Class and Type) : named constant, LOGICAL(4)
      |(Attributes)     : PUBLIC
      |(Declaration)    : 13
      |(Definition)     : 
      |(Reference)      : 
     dp
      |(Class and Type) : use name
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 8
     kind_params
      |(Class and Type) : module name
      |(Attributes)     : PUBLIC
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 8
     wp
      |(Class and Type) : named constant, INTEGER(4)
      |(Attributes)     : PUBLIC, use-associated
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 8

 Scoping unit of module sub-program : error_stop
   Attribute and Cross reference of name
     error_stop
      |(Class and Type) : module subroutine name
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 22
      |(Reference)      : 29
     message
      |(Class and Type) : variable name, CHARACTER(*,1)
      |(Attributes)     : INTENT(IN), OPTIONAL, dummy-argument
      |(Declaration)    : 22  23
      |(Definition)     : 
      |(Reference)      : 24  25
     present
      |(Class and Type) : intrinsic function name, LOGICAL(4)
      |(Attributes)     : PURE
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 24

 Scoping unit of module sub-program : error_msg
   Attribute and Cross reference of name
     error_msg
      |(Class and Type) : module subroutine name
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 37
      |(Reference)      : 47
     error_stop
      |(Class and Type) : module subroutine name
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 45
     flagval
      |(Class and Type) : variable name, INTEGER(4)
      |(Attributes)     : INTENT(IN), dummy-argument
      |(Declaration)    : 37  39
      |(Definition)     : 
      |(Reference)      : 43
     message
      |(Class and Type) : variable name, CHARACTER(*,1)
      |(Attributes)     : INTENT(IN), OPTIONAL, dummy-argument
      |(Declaration)    : 37  38
      |(Definition)     : 
      |(Reference)      : 45
     present
      |(Class and Type) : intrinsic function name, LOGICAL(4)
      |(Attributes)     : PURE
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 42
     status
      |(Class and Type) : variable name, INTEGER(4)
      |(Attributes)     : INTENT(OUT), OPTIONAL, dummy-argument
      |(Declaration)    : 37  40
      |(Definition)     : 43
      |(Reference)      : 42

 Total information
   Procedures       : 1
   Total lines      : 50
   Total statements : 24

