
 Lahey/Fujitsu Fortran 95 Compiler Release L6.20b  Wed Dec 14 13:09:48 2005
 Copyright (C) 1994-2003 Lahey Computer Systems.  All rights reserved.
 Copyright (C) 1998-2003 FUJITSU LIMITED. All rights reserved.

 Compilation information
   Current directory : /home/job/src/vasputil_f90
   Source file       : src/lattice.f90
   Compiler options  : --ap -c --chk aesux --chkglobal --nco --dal --ndbl --f95 
                     : -g --nin --info --li --lst --nlong --maxfatals 50 --nml 
                     : --nmldefault --o0 --no --nocl --nopenmp --nparallel 
                     : --nprefetch --pca --nprivate --nquad --quiet --nsav 
                     : --nshared --nsse2 --nstaticlink --nswm --tp 
                     : --nthreadheap --nthreads --trace --trap --nunroll 
                     : --nvarheap --nversion --warn --nwide --nwisk --wo --nzfm 
                     : --xref

 Module "lattice"
  (line-no.)(nest)
          1        !****h* vasputil/lattice
          2        ! COPYRIGHT
          3        !  Copyright (c) 2004, 2005 Janne Blomqvist
          4        
          5        !  This program is free software; you can redistribute it and/or modify
          6        !  it under the terms of the GNU General Public License as published by
          7        !  the Free Software Foundation; either version 2 of the License, or
          8        !  (at your option) any later version.
          9        
         10        !  This program is distributed in the hope that it will be useful,
         11        !  but WITHOUT ANY WARRANTY; without even the implied warranty of
         12        !  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
         13        !  GNU General Public License for more details.
         14        
         15        !  You should have received a copy of the GNU General Public License
         16        !  along with this program; if not, write to the Free Software
         17        !  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
         18        
         19        ! PURPOSE
         20        ! This module defines a lattice type and procedures for manipulating
         21        ! lattices.
         22        !****
         23        
         24        module lattice
         25          use conf
         26          use geometry
         27          use mathconst
         28        !  use la_precision, only: wp => dp
         29          use f95_lapack
         30        
         31          implicit none
         32        
         33          !****t* lattice/latt
         34          ! PURPOSE
         35          ! Type for lattices. Contains the lattice vectors, lattice constant and
         36          ! volume.
         37          !****
         38          type latt
         39             ! lattice translation vectors for direct (t) and reciprocal (g) lattice.
         40             ! Vectors are stored in 3x3 matrices as COLUMN vectors
         41             real(wp), dimension(3,3) :: t, g
         42             ! real(wp), dimension(:,:), allocatable :: d ! basis vectors.
         43             ! Lattice constant and volume of cell
         44             real(wp) :: a, omega
         45             ! logical :: cartesian = .FALSE. , reciprocal = .FALSE.
         46          end type latt
         47        
         48          contains
         49        
         50            !****f* lattice/latt_init
         51            ! PURPOSE
         52            ! Call this subroutine to calculate the reciprocal lattice vectors
         53            ! and the volume.
         54            !****
         55            subroutine latt_init(lattice)
         56              type(latt), intent(inout) :: lattice
         57              real(wp) :: rvol
         58              lattice%omega = dot_product(lattice%t(:,1), lattice%t(:,2) .cross. lattice%t(:,3))
         59              rvol = 2*pi_Value/lattice%omega
         60              lattice%g(:,1) = rvol * lattice%t(:,2) .cross. lattice%t(:,3)
         61              lattice%g(:,2) = rvol * lattice%t(:,3) .cross. lattice%t(:,1)
         62              lattice%g(:,3) = rvol * lattice%t(:,1) .cross. lattice%t(:,2)
         63        
         64              !print *, 'Reciprocal lattice vectors are: '
         65              !print *, 'g_1 = ', lattice%g(:,1)
         66              !print *, 'g_2 = ', lattice%g(:,2)
         67              !print *, 'g_3 = ', lattice%g(:,3)
         68            end subroutine latt_init
         69        
         70        
         71            !****f* lattice/direct2recip
         72            ! PURPOSE
         73            ! Convert a set of points from the direct to the reciprocal lattice.
         74            ! This would be more efficient by using a Fast Fourier transform, but
         75            ! this is simple and fast enough.
         76            !****
         77            subroutine direct2recip(lattice, coords)
         78              type(latt), intent(inout) :: lattice
         79              ! coords should be of size 3xnumAtoms
         80              real(wp), dimension(:,:), intent(inout) :: coords
         81              ! We don't want to change the lattice, so we make a copy of it
         82              real(wp), dimension(3,3) :: rlattvect
         83              call latt_init(lattice)
         84              rlattvect = lattice%g
         85        
         86              ! Call LAPACK95 routine to solve Ax=b
         87              ! print *, 'Calling lapack!'
         88              call la_gesv (rlattvect, coords)
         89        
         90              ! Multiply by sqrt(3) so that absolute values are comparable
         91              ! to VASP k-point output list (in OUTCAR).
         92              coords = coords*sqrt(3.0_wp)
         93            end subroutine direct2recip
         94        
         95        
         96            !****f* lattice/cart2Direct
         97            ! PURPOSE
         98            ! Change coordinates from cartesian to direct. This is done by
         99            ! solving Ax=b where A is the lattice vectors, x are the coordinates
        100            ! in direct space and b are the coordinates in cartesian space.
        101            !****
        102            subroutine cart2Direct(lattice, coords)
        103              type(latt), intent(in) :: lattice
        104              real(wp), dimension(:,:), intent(inout) :: coords
        105              real(wp), dimension(3,3) :: lattvect
        106        
        107              lattvect = lattice%t
        108        
        109              call la_gesv (lattvect, coords)
        110            end subroutine cart2Direct
        111        
        112        
        113            !****f* lattice/read_lattice
        114            ! PURPOSE
        115            ! Read lattice constant and vectors from stdin.
        116            !****
        117            subroutine read_lattice (lattice)
        118              type(latt), intent(out) :: lattice
        119              integer :: i
        120              print *, 'Enter the lattice constant:'
        121              read (*, *) lattice%a
        122              print *, 'Enter the lattice vectors:'
        123     1        do i = 1, 3
        124     1           read (*, *) lattice%t(1,i), lattice%t(2,i), &
        125     1                lattice%t(3,i)
        126     1        end do
        127              print *, 'read lattice stuff'
        128     1        if (is_lin_dependent (lattice%t)) then
        129     1           call error_stop ("ERROR: Lattice vectors are not linearly independent!")
        130     1        end if
        131              call latt_init (lattice)
        132            end subroutine read_lattice
        133        
        134        end module lattice

 Procedure information
   Lines      : 134
   Statements : 52

 Scoping unit of module : lattice
   Attribute and Cross reference of name
     conf
      |(Class and Type) : module name
      |(Attributes)     : PUBLIC
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 25
     f95_lapack
      |(Class and Type) : module name
      |(Attributes)     : PUBLIC
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 29
     geometry
      |(Class and Type) : module name
      |(Attributes)     : PUBLIC
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 26
     latt
      |(Class and Type) : type name
      |(Attributes)     : PUBLIC
      |(Declaration)    : 
      |(Definition)     : 38
      |(Reference)      : 
     lattice
      |(Class and Type) : module name
      |(Attributes)     : 
      |(Declaration)    : 24
      |(Definition)     : 
      |(Reference)      : 134
     mathconst
      |(Class and Type) : module name
      |(Attributes)     : PUBLIC
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 27
   Derived type construction
     latt
      |  (Attributes) : 
      |t
      |  (Type and Attributes) : REAL(8), DIMENSION
      |g
      |  (Type and Attributes) : REAL(8), DIMENSION
      |a
      |  (Type and Attributes) : REAL(8)
      |omega
      |  (Type and Attributes) : REAL(8)

 Scoping unit of module sub-program : latt_init
   Attribute and Cross reference of name
     dot_product
      |(Class and Type) : intrinsic function name, REAL(8)
      |(Attributes)     : PURE
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 58
     latt
      |(Class and Type) : type name
      |(Attributes)     : host-associated
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 56
     latt_init
      |(Class and Type) : module subroutine name
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 55
      |(Reference)      : 68
     lattice
      |(Class and Type) : variable name, TYPE(latt)
      |(Attributes)     : INTENT(INOUT), dummy-argument
      |(Declaration)    : 55  56
      |(Definition)     : 58  60  61  62
      |(Reference)      : 58  58  58  59  60  60  61  61  62  62
     pi_Value
      |(Class and Type) : named constant, REAL(8)
      |(Attributes)     : host-associated
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 59
     rvol
      |(Class and Type) : variable name, REAL(8)
      |(Attributes)     : 
      |(Declaration)    : 57
      |(Definition)     : 59
      |(Reference)      : 60  61  62
     wp
      |(Class and Type) : named constant, INTEGER(4)
      |(Attributes)     : host-associated
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 57
     [OPERATOR(.cross.)]
      |(Class and Type) : user defined operator
      |(Attributes)     : host-associated, PURE
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 58  60  61  62

 Scoping unit of module sub-program : direct2recip
   Attribute and Cross reference of name
     coords
      |(Class and Type) : variable name, REAL(8)
      |(Attributes)     : DIMENSION, INTENT(INOUT), dummy-argument
      |(Declaration)    : 77  80
      |(Definition)     : 88  92
      |(Reference)      : 92
     direct2recip
      |(Class and Type) : module subroutine name
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 77
      |(Reference)      : 93
     LA_GESV
      |(Class and Type) : generic name
      |(Attributes)     : host-associated
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 88
     latt
      |(Class and Type) : type name
      |(Attributes)     : host-associated
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 78
     latt_init
      |(Class and Type) : module subroutine name
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 83
     lattice
      |(Class and Type) : variable name, TYPE(latt)
      |(Attributes)     : INTENT(INOUT), dummy-argument
      |(Declaration)    : 77  78
      |(Definition)     : 83
      |(Reference)      : 84
     rlattvect
      |(Class and Type) : variable name, REAL(8)
      |(Attributes)     : DIMENSION
      |(Declaration)    : 82
      |(Definition)     : 84  88
      |(Reference)      : 
     sqrt
      |(Class and Type) : intrinsic function name, REAL(8)
      |(Attributes)     : PURE, ELEMENTAL
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 92
     wp
      |(Class and Type) : named constant, INTEGER(4)
      |(Attributes)     : host-associated
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 80  82  92

 Scoping unit of module sub-program : cart2Direct
   Attribute and Cross reference of name
     cart2Direct
      |(Class and Type) : module subroutine name
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 102
      |(Reference)      : 110
     coords
      |(Class and Type) : variable name, REAL(8)
      |(Attributes)     : DIMENSION, INTENT(INOUT), dummy-argument
      |(Declaration)    : 102  104
      |(Definition)     : 109
      |(Reference)      : 
     LA_GESV
      |(Class and Type) : generic name
      |(Attributes)     : host-associated
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 109
     latt
      |(Class and Type) : type name
      |(Attributes)     : host-associated
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 103
     lattice
      |(Class and Type) : variable name, TYPE(latt)
      |(Attributes)     : INTENT(IN), dummy-argument
      |(Declaration)    : 102  103
      |(Definition)     : 
      |(Reference)      : 107
     lattvect
      |(Class and Type) : variable name, REAL(8)
      |(Attributes)     : DIMENSION
      |(Declaration)    : 105
      |(Definition)     : 107  109
      |(Reference)      : 
     wp
      |(Class and Type) : named constant, INTEGER(4)
      |(Attributes)     : host-associated
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 104  105

 Scoping unit of module sub-program : read_lattice
   Attribute and Cross reference of name
     error_stop
      |(Class and Type) : module subroutine name
      |(Attributes)     : host-associated
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 129
     i
      |(Class and Type) : variable name, INTEGER(4)
      |(Attributes)     : 
      |(Declaration)    : 119
      |(Definition)     : 123
      |(Reference)      : 124  124  124
     is_lin_dependent
      |(Class and Type) : module function name, LOGICAL(4)
      |(Attributes)     : host-associated
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 128
     latt
      |(Class and Type) : type name
      |(Attributes)     : host-associated
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 118
     latt_init
      |(Class and Type) : module subroutine name
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 131
     lattice
      |(Class and Type) : variable name, TYPE(latt)
      |(Attributes)     : INTENT(OUT), dummy-argument
      |(Declaration)    : 117  118
      |(Definition)     : 121  124  124  124  131
      |(Reference)      : 128
     read_lattice
      |(Class and Type) : module subroutine name
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 117
      |(Reference)      : 132

 Total information
   Procedures       : 1
   Total lines      : 134
   Total statements : 52

