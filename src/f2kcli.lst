
 Lahey/Fujitsu Fortran 95 Compiler Release L6.20b  Mon Sep 19 12:45:00 2005
 Copyright (C) 1994-2003 Lahey Computer Systems.  All rights reserved.
 Copyright (C) 1998-2003 FUJITSU LIMITED. All rights reserved.

 Compilation information
   Current directory : /home/job/src/vasputil_f90
   Source file       : src/f2kcli.f90
   Compiler options  : --ap -c --chk aesux --chkglobal --nco --dal --ndbl --f95 
                     : -g --nin --info --li --lst --nlong --maxfatals 50 --nml 
                     : --nmldefault --o0 --no --nocl --nopenmp --nparallel 
                     : --nprefetch --pca --nprivate --nquad --quiet --nsav 
                     : --nshared --nsse2 --nstaticlink --nswm --tp 
                     : --nthreadheap --nthreads --trace --trap --nunroll 
                     : --nvarheap --nversion --warn --nwide --nwisk --wo --nzfm 
                     : --xref

 Module "F2KCLI"
  (line-no.)(nest)
          1        ! F2KCLI : Fortran 200x Command Line Interface
          2        ! copyright Interactive Software Services Ltd. 2001
          3        ! For conditions of use see manual.txt
          4        !
          5        ! Platform    : Unix/Linux
          6        ! Compiler    : Any Fortran 9x compiler supporting IARGC/GETARG
          7        !               which counts the first true command line argument
          8        !               after the program name as argument number one.
          9        !               (Excludes compilers which require a special USE
         10        !               statement to make IARGC/GETARG available).
         11        ! To compile  : f90 -c f2kcli.f90
         12        !               (exact compiler name will vary)
         13        ! Implementer : Lawson B. Wakefield, I.S.S. Ltd.
         14        ! Date        : February 2001
         15        !
         16              MODULE F2KCLI
         17        !
         18              CONTAINS
         19        !
         20              SUBROUTINE GET_COMMAND(COMMAND,LENGTH,STATUS)
         21        !
         22        ! Description. Returns the entire command by which the program was
         23        !   invoked.
         24        !
         25        ! Class. Subroutine.
         26        !
         27        ! Arguments.
         28        ! COMMAND (optional) shall be scalar and of type default character.
         29        !   It is an INTENT(OUT) argument. It is assigned the entire command
         30        !   by which the program was invoked. If the command cannot be
         31        !   determined, COMMAND is assigned all blanks.
         32        ! LENGTH (optional) shall be scalar and of type default integer. It is
         33        !   an INTENT(OUT) argument. It is assigned the significant length
         34        !   of the command by which the program was invoked. The significant
         35        !   length may include trailing blanks if the processor allows commands
         36        !   with significant trailing blanks. This length does not consider any
         37        !   possible truncation or padding in assigning the command to the
         38        !   COMMAND argument; in fact the COMMAND argument need not even be
         39        !   present. If the command length cannot be determined, a length of
         40        !   0 is assigned.
         41        ! STATUS (optional) shall be scalar and of type default integer. It is
         42        !   an INTENT(OUT) argument. It is assigned the value 0 if the
         43        !   command retrieval is sucessful. It is assigned a processor-dependent
         44        !   non-zero value if the command retrieval fails.
         45        !
         46              CHARACTER(LEN=*), INTENT(OUT), OPTIONAL :: COMMAND
         47              INTEGER         , INTENT(OUT), OPTIONAL :: LENGTH
         48              INTEGER         , INTENT(OUT), OPTIONAL :: STATUS
         49        !
         50              INTEGER                   :: IARG,NARG,IPOS
         51              INTEGER            , SAVE :: LENARG
         52              CHARACTER(LEN=2000), SAVE :: ARGSTR
         53              LOGICAL            , SAVE :: GETCMD = .TRUE.
         54        !
         55        ! The following INTEGER/EXTERNAL declarations of IARGC should not
         56        ! really be necessary. However, at least one compiler (PGI) comments
         57        ! on their absence, so they are included for completeness.
         58        !
         59              INTEGER :: IARGC
         60              EXTERNAL   IARGC
         61        !
         62        ! Under Unix we must reconstruct the command line from its constituent
         63        ! parts. This will not be the original command line. Rather it will be
         64        ! the expanded command line as generated by the shell.
         65        !
         66     1        IF (GETCMD) THEN
         67     1            NARG = IARGC()
         68     2            IF (NARG > 0) THEN
         69     2                IPOS = 1
         70     3                DO IARG = 1,NARG
         71     3                  CALL GETARG(IARG,ARGSTR(IPOS:))
         72     3                  LENARG = LEN_TRIM(ARGSTR)
         73     3                  IPOS   = LENARG + 2
         74     3                  IF (IPOS > LEN(ARGSTR)) EXIT
         75     3                END DO
         76     2            ELSE
         77     2                ARGSTR = ' '
         78     2                LENARG = 0
         79     2            ENDIF
         80     1            GETCMD = .FALSE.
         81     1        ENDIF
         82              IF (PRESENT(COMMAND)) COMMAND = ARGSTR
         83              IF (PRESENT(LENGTH))  LENGTH  = LENARG
         84              IF (PRESENT(STATUS))  STATUS  = 0
         85              RETURN
         86              END SUBROUTINE GET_COMMAND
         87        !
         88              INTEGER FUNCTION COMMAND_ARGUMENT_COUNT()
         89        !
         90        ! Description. Returns the number of command arguments.
         91        !
         92        ! Class. Inquiry function
         93        !
         94        ! Arguments. None.
         95        !
         96        ! Result Characteristics. Scalar default integer.
         97        !
         98        ! Result Value. The result value is equal to the number of command
         99        !   arguments available. If there are no command arguments available
        100        !   or if the processor does not support command arguments, then
        101        !   the result value is 0. If the processor has a concept of a command
        102        !   name, the command name does not count as one of the command
        103        !   arguments.
        104        !
        105        ! The following INTEGER/EXTERNAL declarations of IARGC should not
        106        ! really be necessary. However, at least one compiler (PGI) comments
        107        ! on their absence, so they are included for completeness.
        108        !
        109              INTEGER :: IARGC
        110              EXTERNAL   IARGC
        111        !
        112              COMMAND_ARGUMENT_COUNT = IARGC()
        113              RETURN
        114              END FUNCTION COMMAND_ARGUMENT_COUNT
        115        !
        116              SUBROUTINE GET_COMMAND_ARGUMENT(NUMBER,VALUE,LENGTH,STATUS)
        117        !
        118        ! Description. Returns a command argument.
        119        !
        120        ! Class. Subroutine.
        121        !
        122        ! Arguments.
        123        ! NUMBER shall be scalar and of type default integer. It is an
        124        !   INTENT(IN) argument. It specifies the number of the command
        125        !   argument that the other arguments give information about. Useful
        126        !   values of NUMBER are those between 0 and the argument count
        127        !   returned by the COMMAND_ARGUMENT_COUNT intrinsic.
        128        !   Other values are allowed, but will result in error status return
        129        !   (see below).  Command argument 0 is defined to be the command
        130        !   name by which the program was invoked if the processor has such
        131        !   a concept. It is allowed to call the GET_COMMAND_ARGUMENT
        132        !   procedure for command argument number 0, even if the processor
        133        !   does not define command names or other command arguments.
        134        !   The remaining command arguments are numbered consecutively from
        135        !   1 to the argument count in an order determined by the processor.
        136        ! VALUE (optional) shall be scalar and of type default character.
        137        !   It is an INTENT(OUT) argument. It is assigned the value of the
        138        !   command argument specified by NUMBER. If the command argument value
        139        !   cannot be determined, VALUE is assigned all blanks.
        140        ! LENGTH (optional) shall be scalar and of type default integer.
        141        !   It is an INTENT(OUT) argument. It is assigned the significant length
        142        !   of the command argument specified by NUMBER. The significant
        143        !   length may include trailing blanks if the processor allows command
        144        !   arguments with significant trailing blanks. This length does not
        145        !   consider any possible truncation or padding in assigning the
        146        !   command argument value to the VALUE argument; in fact the
        147        !   VALUE argument need not even be present. If the command
        148        !   argument length cannot be determined, a length of 0 is assigned.
        149        ! STATUS (optional) shall be scalar and of type default integer.
        150        !   It is an INTENT(OUT) argument. It is assigned the value 0 if
        151        !   the argument retrieval is sucessful. It is assigned a
        152        !   processor-dependent non-zero value if the argument retrieval fails.
        153        !
        154        ! NOTE
        155        !   One possible reason for failure is that NUMBER is negative or
        156        !   greater than COMMAND_ARGUMENT_COUNT().
        157        !
        158              INTEGER         , INTENT(IN)            :: NUMBER
        159              CHARACTER(LEN=*), INTENT(OUT), OPTIONAL :: VALUE
        160              INTEGER         , INTENT(OUT), OPTIONAL :: LENGTH
        161              INTEGER         , INTENT(OUT), OPTIONAL :: STATUS
        162        !
        163        !  A temporary variable for the rare case case where LENGTH is
        164        !  specified but VALUE is not. An arbitrary maximum argument length
        165        !  of 1000 characters should cover virtually all situations.
        166        !
        167              CHARACTER(LEN=1000) :: TMPVAL
        168        !
        169        ! The following INTEGER/EXTERNAL declarations of IARGC should not
        170        ! really be necessary. However, at least one compiler (PGI) comments
        171        ! on their absence, so they are included for completeness.
        172        !
        173              INTEGER :: IARGC
        174              EXTERNAL   IARGC
        175        !
        176        ! Possible error codes:
        177        ! 1 = Argument number is less than minimum
        178        ! 2 = Argument number exceeds maximum
        179        !
        180     1        IF (NUMBER < 0) THEN
        181     1            IF (PRESENT(VALUE )) VALUE  = ' '
        182     1            IF (PRESENT(LENGTH)) LENGTH = 0
        183     1            IF (PRESENT(STATUS)) STATUS = 1
        184     1            RETURN
        185     1        ELSE IF (NUMBER > IARGC()) THEN
        186     1            IF (PRESENT(VALUE )) VALUE  = ' '
        187     1            IF (PRESENT(LENGTH)) LENGTH = 0
        188     1            IF (PRESENT(STATUS)) STATUS = 2
        189     1            RETURN
        190     1        END IF
        191        !
        192        ! Get the argument if VALUE is present
        193        !
        194              IF (PRESENT(VALUE)) CALL GETARG(NUMBER,VALUE)
        195        !
        196        ! The LENGTH option is fairly pointless under Unix.
        197        ! Trailing spaces can only be specified using quotes.
        198        ! Since the command line has already been processed by the
        199        ! shell before the application sees it, we have no way of
        200        ! knowing the true length of any quoted arguments. LEN_TRIM
        201        ! is used to ensure at least some sort of meaningful result.
        202        !
        203     1        IF (PRESENT(LENGTH)) THEN
        204     2            IF (PRESENT(VALUE)) THEN
        205     2                LENGTH = LEN_TRIM(VALUE)
        206     2            ELSE
        207     2                CALL GETARG(NUMBER,TMPVAL)
        208     2                LENGTH = LEN_TRIM(TMPVAL)
        209     2            END IF
        210     1        END IF
        211        !
        212        ! Since GETARG does not return a result code, assume success
        213        !
        214              IF (PRESENT(STATUS)) STATUS = 0
        215              RETURN
        216              END SUBROUTINE GET_COMMAND_ARGUMENT
        217        !
        218              END MODULE F2KCLI

 Procedure information
   Lines      : 218
   Statements : 71

 Scoping unit of module : F2KCLI
   Attribute and Cross reference of name
     F2KCLI
      |(Class and Type) : module name
      |(Attributes)     : 
      |(Declaration)    : 16
      |(Definition)     : 
      |(Reference)      : 218

 Scoping unit of module sub-program : GET_COMMAND
   Attribute and Cross reference of name
     ARGSTR
      |(Class and Type) : variable name, CHARACTER(2000,1)
      |(Attributes)     : SAVE
      |(Declaration)    : 52
      |(Definition)     : 71  77
      |(Reference)      : 72  74  82
     COMMAND
      |(Class and Type) : variable name, CHARACTER(*,1)
      |(Attributes)     : INTENT(OUT), OPTIONAL, dummy-argument
      |(Declaration)    : 20  46
      |(Definition)     : 82
      |(Reference)      : 82
     GETARG
      |(Class and Type) : external subroutine name
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 71
     GETCMD
      |(Class and Type) : variable name, LOGICAL(4)
      |(Attributes)     : SAVE, initialized
      |(Declaration)    : 53
      |(Definition)     : 80
      |(Reference)      : 66
     GET_COMMAND
      |(Class and Type) : module subroutine name
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 20
      |(Reference)      : 86
     IARG
      |(Class and Type) : variable name, INTEGER(4)
      |(Attributes)     : 
      |(Declaration)    : 50
      |(Definition)     : 70  71
      |(Reference)      : 
     IARGC
      |(Class and Type) : external function name, INTEGER(4)
      |(Attributes)     : EXTERNAL
      |(Declaration)    : 60
      |(Definition)     : 
      |(Reference)      : 67
     IARGC
      |(Class and Type) : variable name, INTEGER(4)
      |(Attributes)     : 
      |(Declaration)    : 59
      |(Definition)     : 
      |(Reference)      : 
     IPOS
      |(Class and Type) : variable name, INTEGER(4)
      |(Attributes)     : 
      |(Declaration)    : 50
      |(Definition)     : 69  73
      |(Reference)      : 71  74
     LEN
      |(Class and Type) : intrinsic function name, INTEGER(4)
      |(Attributes)     : PURE
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 74
     LENARG
      |(Class and Type) : variable name, INTEGER(4)
      |(Attributes)     : SAVE
      |(Declaration)    : 51
      |(Definition)     : 72  78
      |(Reference)      : 73  83
     LENGTH
      |(Class and Type) : variable name, INTEGER(4)
      |(Attributes)     : INTENT(OUT), OPTIONAL, dummy-argument
      |(Declaration)    : 20  47
      |(Definition)     : 83
      |(Reference)      : 83
     LEN_TRIM
      |(Class and Type) : intrinsic function name, INTEGER(4)
      |(Attributes)     : PURE, ELEMENTAL
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 72
     NARG
      |(Class and Type) : variable name, INTEGER(4)
      |(Attributes)     : 
      |(Declaration)    : 50
      |(Definition)     : 67
      |(Reference)      : 68  70
     PRESENT
      |(Class and Type) : intrinsic function name, LOGICAL(4)
      |(Attributes)     : PURE
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 82  83  84
     STATUS
      |(Class and Type) : variable name, INTEGER(4)
      |(Attributes)     : INTENT(OUT), OPTIONAL, dummy-argument
      |(Declaration)    : 20  48
      |(Definition)     : 84
      |(Reference)      : 84

 Scoping unit of module sub-program : COMMAND_ARGUMENT_COUNT
   Attribute and Cross reference of name
     COMMAND_ARGUMENT_COUNT
      |(Class and Type) : variable name, INTEGER(4)
      |(Attributes)     : result-value
      |(Declaration)    : 
      |(Definition)     : 112
      |(Reference)      : 
     COMMAND_ARGUMENT_COUNT
      |(Class and Type) : module function name, INTEGER(4)
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 88
      |(Reference)      : 114
     IARGC
      |(Class and Type) : external function name, INTEGER(4)
      |(Attributes)     : EXTERNAL
      |(Declaration)    : 110
      |(Definition)     : 
      |(Reference)      : 112
     IARGC
      |(Class and Type) : variable name, INTEGER(4)
      |(Attributes)     : 
      |(Declaration)    : 109
      |(Definition)     : 
      |(Reference)      : 

 Scoping unit of module sub-program : GET_COMMAND_ARGUMENT
   Attribute and Cross reference of name
     GETARG
      |(Class and Type) : external subroutine name
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 194  207
     GET_COMMAND_ARGUMENT
      |(Class and Type) : module subroutine name
      |(Attributes)     : 
      |(Declaration)    : 
      |(Definition)     : 116
      |(Reference)      : 216
     IARGC
      |(Class and Type) : external function name, INTEGER(4)
      |(Attributes)     : EXTERNAL
      |(Declaration)    : 174
      |(Definition)     : 
      |(Reference)      : 185
     IARGC
      |(Class and Type) : variable name, INTEGER(4)
      |(Attributes)     : 
      |(Declaration)    : 173
      |(Definition)     : 
      |(Reference)      : 
     LENGTH
      |(Class and Type) : variable name, INTEGER(4)
      |(Attributes)     : INTENT(OUT), OPTIONAL, dummy-argument
      |(Declaration)    : 116  160
      |(Definition)     : 182  187  205  208
      |(Reference)      : 182  187  203
     LEN_TRIM
      |(Class and Type) : intrinsic function name, INTEGER(4)
      |(Attributes)     : PURE, ELEMENTAL
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 205  208
     NUMBER
      |(Class and Type) : variable name, INTEGER(4)
      |(Attributes)     : INTENT(IN), dummy-argument
      |(Declaration)    : 116  158
      |(Definition)     : 
      |(Reference)      : 180  185  194  207
     PRESENT
      |(Class and Type) : intrinsic function name, LOGICAL(4)
      |(Attributes)     : PURE
      |(Declaration)    : 
      |(Definition)     : 
      |(Reference)      : 181  182  183  186  187  188  194  203  204  214
     STATUS
      |(Class and Type) : variable name, INTEGER(4)
      |(Attributes)     : INTENT(OUT), OPTIONAL, dummy-argument
      |(Declaration)    : 116  161
      |(Definition)     : 183  188  214
      |(Reference)      : 183  188  214
     TMPVAL
      |(Class and Type) : variable name, CHARACTER(1000,1)
      |(Attributes)     : 
      |(Declaration)    : 167
      |(Definition)     : 207
      |(Reference)      : 208
     VALUE
      |(Class and Type) : variable name, CHARACTER(*,1)
      |(Attributes)     : INTENT(OUT), OPTIONAL, dummy-argument
      |(Declaration)    : 116  159
      |(Definition)     : 181  186  194
      |(Reference)      : 181  186  194  204  205

 Total information
   Procedures       : 1
   Total lines      : 218
   Total statements : 71

