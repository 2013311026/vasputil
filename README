
Vasputil release 4.1

Vasputil is a command-line utility designed to make life with VASP
easier. It provides a set of commands to manipulate POSCAR files.

Available commands are:
poscar2xyz: Convert a POSCAR file to a xyz format file.
plane2atom: Calculate the average distance from a plane to a set of atoms.
plane2layer: Calculate the average distance from a plane to a layer.
atomsdistance: Calculate the distance between two atoms.
atomsmoved: Check which atoms have moved from one POSCAR to another.
interpolate: Interpolate the coordinates between two POSCAR files.
normalize: Normalize the coordinates in a POSCAR file.
unnormalize: Unnormalize coordinates in a POSCAR file.
centercell: Center a cell around a point.
removeatoms: Remove atoms from a POSCAR file.
kspace2xyz: Convert a POSCAR file to a xyz file with reciprocal coordinates.
check_nndist: Check nearest neighbor distances.
scgenerator: Generate a supercell.
lockatoms: Lock atom coordinates in a supercell.
xyz2poscar: Convert a XYZ file to a POSCAR file.
dumpcoords: Dump cartesian coordinates to stdout.
importcoords: Read cartesian coordinates from stdin.
dumpatomsase: Dump atom types and coordinates suitable for importing to Campos ASE.
test: Run self-tests.

Documentation for each utility is available by running it without any
arguments, e.g. "vasputil poscar2xyz".

Vasputil is written in the Fortran 95 programming language with a few optional
Fortran 2003 features such as command line argument handling, and should be
compilable by any compiler that conforms to said standard. Makefiles for IBM
xlf95, Lahey lf95, Pathscale pathf90, Intel ifort and Portland pgf90 are
provided.

Vasputil depends on the LAPACK and BLAS libraries. The provided
Makefiles use different platform-specific optimized versions of the
BLAS library; the xlf Makefile uses ESSL, the Lahey Makefile uses the
BLAS that is provided with the Lahey compiler, and the Portland and
Pathscale Makefiles use the AMD ACML library.

To regenerate the source code documentation (file doc/vasputil.html),
the robodoc utility is needed. To regenerate the dependency list, the
makedepf90 utility is needed.


QUICK INSTALLATION INSTRUCTIONS

1) Unpack the source code.

$ tar xvzf vasputil-$(VERSION).tar.gz

2) Run configure, if necessary with extra flags to specify location of
libraries not in the default search path, if you want to use some specific
compiler etc.

Eg. to use dynamically linked ACML:

$ ./configure LDFLAGS=-L/opt/acml/pathscale64/lib/

Statically linked ACML

$ ./configure --with-blas=/opt/acml/pathscale64/lib/libacml.a

Use Intel Fortran

$ ./configure FC=ifort

Install somewhere not in the default location ($HOME)

$ ./configure --prefix=/usr/local

For help, see

$ ./configure --help

3) Compile and install.

$ make && make install

To use the Octave/Matlab scripts it is recommended to add the path
where the scripts are found to the search path. 

E.g. if the PREFIX in Makefile is $(HOME), for octave 2.x add the following
line to ~/.octaverc:

LOADPATH = ['~/lib/m/', LOADPATH];

For octave 3.x, the initialization has become more matlab-like, so add the
following to ~/.octaverc:

path(path, '~/lib/m')

For MATLAB, add the following to startup.m (in the directory where you run
MATLAB): 

path(path, '~/lib/m')

